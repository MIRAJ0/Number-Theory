#include <iostream>
#include <vector>
#include <random>
#include <cmath>

using namespace std;

#define ll long long
#define endl "\n"

// Function to perform modular multiplication
// Time Complexity: O(log(b))
ll modularMultiplication(ll a, ll b, ll mod) {
    ll result = 0;
    a = a % mod;
    while (b > 0) {
        if (b % 2 == 1) {
            result = (result + a) % mod;
        }
        a = (a * 2) % mod;
        b /= 2;
    }
    return result;
}

// Function to perform modular exponentiation
// Time Complexity: O(log(exp))
ll modularExponentiation(ll base, ll exp, ll mod) {
    ll result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}

// Miller-Rabin Primality Test
// Time Complexity: O(k * log(n)^3), where k is the number of iterations
bool millerRabinTest(ll n, int k) {
    if (n <= 1 || n == 4) return false;
    if (n <= 3) return true;

    // Find d such that d * 2^r = n - 1 with d odd
    ll d = n - 1;
    while (d % 2 == 0) {
        d /= 2;
    }

    // Witness loop
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<ll> dis(2, n - 2);
    for (int i = 0; i < k; i++) {
        ll a = dis(gen);
        ll x = modularExponentiation(a, d, n);
        if (x == 1 || x == n - 1) continue;

        bool continueLoop = false;
        for (ll r = d; r != n - 1; r *= 2) {
            x = modularMultiplication(x, x, n);
            if (x == 1) return false;
            if (x == n - 1) {
                continueLoop = true;
                break;
            }
        }
        if (!continueLoop) return false;
    }
    return true;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int Q;
    cin >> Q;
    while (Q--) {
        ll N;
        cin >> N;
        if (millerRabinTest(N, 5)) {
            cout << "Yes" << endl;
        } else {
            cout << "No" << endl;
        }
    }

    return 0;
}
